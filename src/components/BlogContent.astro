---
import { Image } from "astro-preload/components";
import { parseDocument } from "htmlparser2";
import { DomHandler, DomUtils } from "htmlparser2";
import { Element } from "domhandler";

interface Props {
  post: string | undefined | null;
}

// Add type for image data
interface ImageData {
  url: string;
  alt: string;
  attrs: Record<string, string>;
}

const { post } = Astro.props as Props;
let images: ImageData[] = [];
let contentParts: string[] = [];

if (post) {
  const document = parseDocument(post);

  const extractImages = (node: Element) => {
    if (node.type === "tag" && node.name === "img") {
      const { src, alt, ...remainingAttrs } = node.attribs;
      const imageData: ImageData = {
        url: src,
        alt: alt || "",
        attrs: remainingAttrs,
      };

      images.push(imageData);
      node.attribs["data-image-index"] = `${images.length - 1}`;
      node.name = "astro-image-placeholder";
    }

    node.children?.forEach((child) => extractImages(child as Element));
  };

  document.children.forEach((child) => extractImages(child as Element));
  const transformedHtml = DomUtils.getOuterHTML(document);
  contentParts = transformedHtml.split(
    /<astro-image-placeholder[^>]*data-image-index="(\d+)"[^>]*>/
  );
}
---

<div
  class="blog mt-6 md:mt-16 lg:px-44 md:px-44 px-8 leading-7 font-normal text-base flex flex-col gap-4">
  <div
    class="prose max-w-none
          prose-p:text-base
          prose-p:leading-7
          prose-headings:font-bold
          prose-h1:text-2xl
          prose-h2:text-2xl
          prose-h1:md:text-3xl
          prose-h2:md:text-3xl
          prose-h3:md:text-2xl
          prose-a:text-indigo-700
          prose-li:text-base
          prose-em:text-center
          prose-em:text-sm
          prose-em:not-italic
          md:prose-lg lg:prose-xl
          prose-img:rounded-lg prose-img:w-[75%] prose-img:mx-auto prose-img:h-auto">
    {
      contentParts.map((part, index) =>
        index % 2 === 0 ? (
          <Fragment set:html={part} />
        ) : (
          <Image
            url={images[parseInt(part)].url}
            alt={images[parseInt(part)].alt}
            width={1200}
            height={630}
            {...images[parseInt(part)].attrs}
          />
        )
      )
    }
  </div>
</div>

<style is:inline>
  /* Code blocks */
  .blog code {
    font-size: 0.875rem;
    line-height: 1.25rem;
    border-radius: 0.375rem;
    background-color: rgb(249 250 251);
    padding: 0.75rem;
  }

  /* Figures */
  .blog figure {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    align-items: center;
    justify-items: center;
    max-width: max-content;
    overflow: hidden;
  }

  .blog img {
    /* margin-bottom: 0.75rem; */
    border-radius: 0.375rem;
  }

  .blog figcaption {
    text-align: center;
    font-size: 0.75rem;
    line-height: 1rem;
    font-weight: 300;
  }

  /* Callouts */
  .blog .notion-callout {
    margin: 1.5rem 0 2rem;
    display: flex;
    flex-direction: row;
    gap: 1rem;
    padding: 1rem 0.75rem;
    border-radius: 0.375rem;
    color: #333f51;
    background-color: rgb(243 232 255);
    border: 2px solid rgb(79 70 229);
  }

  /* Blockquotes */
  .blog blockquote {
    margin-bottom: 1.5rem;
    padding: 1rem 1.5rem;
    border-left: 2px solid #6366f1;
  }

  .blog blockquote p {
    margin-bottom: 1rem;
    font-size: 1rem;
    line-height: 1.25;
    font-weight: 500;
    color: #1f2937;
  }

  /* Tables */
  .blog table {
    width: 100%;
    margin-bottom: 1.5rem;
    border-collapse: collapse;
  }

  .blog th,
  .blog td {
    padding: 0.75rem;
    border: 1px solid #e5e7eb;
    text-align: left;
  }

  .blog th {
    background-color: #f3f4f6;
    font-weight: 600;
  }

  @media (min-width: 768px) {
    .blog blockquote p {
      font-size: 1.125rem;
    }
  }
</style>
